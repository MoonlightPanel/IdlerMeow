
<!DOCTYPE html>
<html>
<head>
    <title>File Manager - Server #<%= server.port %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body { 
            font-family: Arial, sans-serif; 
            background-color: <%= settings.backgroundColor || '#f5f5f5' %>; 
            <% if (settings.backgroundImage) { %>
                background-image: url('<%= settings.backgroundImage %>');
                background-size: cover;
                background-attachment: fixed;
            <% } %>
        }
        .top-bar {
            background: rgba(44, 62, 80, 0.85);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            color: white;
            padding: 15px 20px;
            margin: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            border-radius: 10px;
        }
        .top-bar h1 {
            font-size: 24px;
        }
        .nav-links {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        .nav-links a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            background-color: #3498db;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .nav-links a:hover {
            background-color: #2980b9;
        }
        .profile-dropdown {
            position: relative;
            display: inline-block;
        }
        .profile-btn {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            background-color: #e74c3c;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .profile-btn:hover {
            background-color: #c0392b;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            border-radius: 5px;
            z-index: 1;
        }
        .dropdown-content a {
            color: #333;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            background: none;
            border-radius: 0;
        }
        .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        .profile-dropdown:hover .dropdown-content {
            display: block;
        }
        .container {
            display: flex;
            min-height: calc(100vh - 90px);
            gap: 10px;
            padding: 0 10px;
        }
        .sidebar {
            width: 250px;
            background: rgba(52, 73, 94, 0.8);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            color: white;
            padding: 20px 0;
            margin: 10px;
            border-radius: 10px;
        }
        .sidebar-item {
            padding: 12px 20px;
            cursor: pointer;
            border-bottom: 1px solid #2c3e50;
            transition: background-color 0.3s;
            text-decoration: none;
            color: white;
            display: block;
            font-size: 14px;
        }
        .sidebar-item:hover, .sidebar-item.active {
            background-color: #2c3e50;
        }
        .content {
            flex: 1;
            padding: 30px;
        }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
        .back-btn { padding: 10px 20px; background-color: #6c757d; color: white; text-decoration: none; border-radius: 5px; }
        .file-manager { 
            background: rgba(255, 255, 255, 0.9); 
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border-radius: 10px; 
            padding: 30px; 
            box-shadow: 0 8px 32px rgba(0,0,0,0.1); 
            border: 1px solid rgba(255,255,255,0.2);
            max-width: 1200px; 
            margin: 0 auto; 
            transition: box-shadow 0.2s; 
        }
        
        .file-manager.drag-over { box-shadow: 0 0 15px rgba(0, 123, 255, 0.5); border: 2px dashed #007bff; }

        .toolbar { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 1px solid #ddd; padding-bottom: 20px; }
        .toolbar .path { font-size: 18px; font-weight: bold; color: #333; }
        .toolbar .actions button { padding: 8px 15px; border: none; border-radius: 5px; cursor: pointer; background-color: #007bff; color: white; margin-left: 10px; }
        .toolbar .actions button.upload-btn { background-color: #28a745; }
        .file-table { width: 100%; border-collapse: collapse; }
        .file-table th, .file-table td { padding: 12px 15px; text-align: left; border-bottom: 1px solid #ddd; vertical-align: middle; }
        .file-table th { background-color: #f8f9fa; }
        .file-table a { text-decoration: none; color: #007bff; }
        .fa-folder { color: #f8d775; }
        .fa-file { color: #c3e6cb; }
        .actions-menu { position: relative; display: inline-block; }
        .dots-btn { background: none; border: none; font-size: 20px; cursor: pointer; }
        .dropdown-content { display: none; position: absolute; right: 0; background-color: #f9f9f9; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); z-index: 10; }
        .dropdown-content a { color: black; padding: 12px 16px; text-decoration: none; display: block; }
        .dropdown-content a:hover { background-color: #f1f1f1; }
        .show { display: block; }
        .bulk-actions { 
            padding: 20px; 
            background: rgba(248, 249, 250, 0.9); 
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-top: 1px solid #ddd; 
            display: none; 
            text-align: center;
            border-radius: 10px;
            margin: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .bulk-actions button {
            padding: 12px 24px;
            margin: 0 8px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .bulk-actions button:first-child {
            background-color: #e74c3c;
            color: white;
        }
        .bulk-actions button:first-child:hover {
            background-color: #c0392b;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);
        }
        .bulk-actions button:nth-child(2) {
            background-color: #3498db;
            color: white;
        }
        .bulk-actions button:nth-child(2):hover {
            background-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
        }
        .bulk-actions button:last-child {
            background-color: #f39c12;
            color: white;
        }
        .bulk-actions button:last-child:hover {
            background-color: #e67e22;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(243, 156, 18, 0.3);
        }

        #toast-container { position: fixed; top: 20px; right: 20px; z-index: 1050; }
        .toast { background-color: #333; color: white; padding: 15px 20px; border-radius: 5px; margin-bottom: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); opacity: 0; transition: opacity 0.3s, transform 0.3s; transform: translateX(100%); }
        .toast.show { opacity: 1; transform: translateX(0); }
        .toast.success { background-color: #28a745; }
        .toast.error { background-color: #dc3545; }

        /* Modal Styles */
        .modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1040; display: none; }
        .modal { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); z-index: 1041; width: 90%; max-width: 500px; display: none; }
        .modal-header { padding: 15px 20px; border-bottom: 1px solid #eee; }
        .modal-header h3 { margin: 0; font-size: 18px; }
        .modal-body { padding: 20px; }
        .modal-body p { margin-top: 0; }
        .modal-body .form-group { margin-bottom: 15px; }
        .modal-body label { display: block; margin-bottom: 5px; }
        .modal-body input { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; }
        .modal-footer { padding: 15px 20px; text-align: right; border-top: 1px solid #eee; }
        .modal-footer button { padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px; }
        .modal-footer .btn-primary { background-color: #007bff; color: white; }
        .modal-footer .btn-secondary { background-color: #6c757d; color: white; }

    </style>
</head>
<body>
    <div id="toast-container"></div>

    <!-- Modal Structure -->
    <div class="modal-backdrop" id="modal-backdrop"></div>
    <div class="modal" id="custom-modal">
        <div class="modal-header">
            <h3 id="modal-title">Modal Title</h3>
        </div>
        <div class="modal-body" id="modal-body">
            <!-- Content goes here -->
        </div>
        <div class="modal-footer">
            <button class="btn-secondary" id="modal-cancel-btn">Cancel</button>
            <button class="btn-primary" id="modal-confirm-btn">Confirm</button>
        </div>
    </div>

    <div class="top-bar">
        <h1><%= typeof settings !== 'undefined' ? settings.title || 'Server Management' : 'Server Management' %></h1>
        <div class="nav-links">
            <a href="/index">Dashboard</a>
            <% if (typeof user !== 'undefined' && user.admin) { %>
                <a href="/admin">Admin Panel</a>
            <% } %>
            <div class="profile-dropdown">
                <span class="profile-btn">Profile</span>
                <div class="dropdown-content">
                    <a href="#">Profile</a>
                    <a href="/logout">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="sidebar">
            <a href="/server/<%= server.port %>" class="sidebar-item">
                Console
            </a>
            <div class="sidebar-item active">
                File Manager
            </div>
            <% if (typeof user !== 'undefined' && (user.admin || server.owner === user.email)) { %>
                <a href="/server/<%= server.port %>/users" class="sidebar-item">
                    Users
                </a>
            <% } %>
            <div class="sidebar-item" style="color: #888; cursor: not-allowed;">
                Settings
            </div>
        </div>

        <div class="content">
            <div class="file-manager" id="file-manager-container">
        <div class="toolbar">
            <div class="path">Current Path: <%= currentPath === '.' ? '/' : currentPath %></div>
            <div class="actions">
                <button onclick="createFile()">New File</button>
                <button onclick="createFolder()">New Folder</button>
                <button onclick="triggerUpload()" class="upload-btn">Upload File</button>
                <input type="file" id="file-upload-input" multiple style="display: none;" onchange="uploadFiles(this.files)">
            </div>
        </div>
        <div class="bulk-actions" id="bulk-actions">
            <button onclick="bulkDelete()">Delete Selected</button>
            <button onclick="bulkMove()">Move Selected</button>
            <button onclick="bulkArchive()">Archive Selected</button>
        </div>
        <table class="file-table">
             <thead>
                <tr>
                    <th><input type="checkbox" id="select-all"></th>
                    <th></th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Size</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <% if (currentPath !== '.') { %>
                    <tr>
                        <td></td>
                        <td><i class="fas fa-folder-open"></i></td>
                        <td><a href="/server/<%= server.port %>/files?path=<%= encodeURIComponent(currentPath.split('/').slice(0, -1).join('/') || '.') %>">..</a></td>
                        <td>Parent Directory</td>
                        <td></td>
                        <td></td>
                    </tr>
                <% } %>
                <% files.forEach(file => { %>
                    <tr>
                        <td><input type="checkbox" class="file-checkbox" value="<%= file.path %>"></td>
                        <td><i class="fas <%= file.isDirectory ? 'fa-folder' : 'fa-file' %>"></i></td>
                        <td>
                            <a href="/server/<%= server.port %>/files?path=<%= encodeURIComponent(file.path) %>">
                                <%= file.name %>
                            </a>
                        </td>
                        <td><%= file.isDirectory ? 'Folder' : 'File' %></td>
                        <td><%= file.size %></td>
                        <td>
                            <div class="actions-menu">
                                <button class="dots-btn" onclick="toggleDropdown('dropdown-<%= file.path.replace(/[^a-zA-Z0-9]/g, '-') %>')">...</button>
                                <div id="dropdown-<%= file.path.replace(/[^a-zA-Z0-9]/g, '-') %>" class="dropdown-content">
                                    <a href="#" onclick="renameFile('<%= file.path %>')">Rename</a>
                                    <a href="#" onclick="moveFile('<%= file.path %>')">Move</a>
                                    <a href="#" onclick="archiveFile('<%= file.path %>')">Archive</a>
                                    <a href="#" onclick="deleteFile('<%= file.path %>')">Delete</a>
                                    <% if (!file.isDirectory) { %>
                                    <a href="/server/<%= server.port %>/download?path=<%= encodeURIComponent(file.path) %>">Download</a>
                                    <% } %>
                                </div>
                            </div>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
            </div>
        </div>
    </div>

    <script>
        const serverPort = <%= server.port %>;
        const currentPath = "<%= currentPath %>";

        // --- Modal Logic ---
        const modal = document.getElementById('custom-modal');
        const backdrop = document.getElementById('modal-backdrop');
        const modalTitle = document.getElementById('modal-title');
        const modalBody = document.getElementById('modal-body');
        const confirmBtn = document.getElementById('modal-confirm-btn');
        const cancelBtn = document.getElementById('modal-cancel-btn');

        let resolvePromise;
        let rejectPromise;

        function showModal() {
            backdrop.style.display = 'block';
            modal.style.display = 'block';
        }

        function hideModal() {
            backdrop.style.display = 'none';
            modal.style.display = 'none';
        }

        cancelBtn.addEventListener('click', () => {
            hideModal();
            if (rejectPromise) rejectPromise('Cancelled by user');
        });

        backdrop.addEventListener('click', () => {
            hideModal();
            if (rejectPromise) rejectPromise('Cancelled by user');
        });

        function showPrompt({ title, label, defaultValue = '', confirmText = 'OK' }) {
            return new Promise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;

                modalTitle.textContent = title;
                modalBody.innerHTML = `
                    <div class="form-group">
                        <label for="modal-input">${label}</label>
                        <input type="text" id="modal-input" class="modal-input" value="${defaultValue}">
                    </div>
                `;
                confirmBtn.textContent = confirmText;

                showModal();

                const input = document.getElementById('modal-input');
                input.focus();
                input.select();

                confirmBtn.onclick = () => {
                    hideModal();
                    resolve(input.value);
                };
            });
        }

        function showConfirm({ title, message, confirmText = 'Confirm' }) {
            return new Promise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;

                modalTitle.textContent = title;
                modalBody.innerHTML = `<p>${message}</p>`;
                confirmBtn.textContent = confirmText;

                showModal();

                confirmBtn.onclick = () => {
                    hideModal();
                    resolve(true);
                };
            });
        }
        
        // --- Core Functions ---
        async function createFile() {
            try {
                const fileName = await showPrompt({ 
                    title: 'Create New File', 
                    label: 'Enter file name (e.g., config.txt):',
                    confirmText: 'Create'
                });
                if (fileName) {
                    const result = await apiCall('create-file', { path: currentPath, name: fileName });
                    handleApiResponse(result, `File '${fileName}' created successfully!`);
                }
            } catch (err) { console.log(err); }
        }

        async function createFolder() {
            try {
                const folderName = await showPrompt({ 
                    title: 'Create New Folder', 
                    label: 'Enter folder name:', 
                    confirmText: 'Create' 
                });
                if (folderName) {
                    const result = await apiCall('create-folder', { path: currentPath, name: folderName });
                    handleApiResponse(result, `Folder '${folderName}' created successfully!`);
                }
            } catch (err) { console.log(err); }
        }

        async function renameFile(oldPath) {
            try {
                const newName = await showPrompt({ 
                    title: 'Rename File', 
                    label: 'Enter new name for ' + oldPath,
                    defaultValue: oldPath.split('/').pop(),
                    confirmText: 'Rename'
                });
                if (newName) {
                    const result = await apiCall('rename', { oldPath, newName });
                    handleApiResponse(result, 'File renamed successfully!');
                }
            } catch (err) { console.log(err); }
        }

        async function moveFile(file) {
            try {
                const newPath = await showPrompt({ 
                    title: 'Move File', 
                    label: 'Enter new directory for ' + file, 
                    confirmText: 'Move' 
                });
                if (newPath) {
                    const result = await apiCall('move', { files: [file], newPath });
                    handleApiResponse(result, 'File moved successfully!');
                }
            } catch (err) { console.log(err); }
        }

        async function archiveFile(file) {
            try {
                const archiveName = await showPrompt({ 
                    title: 'Archive File', 
                    label: 'Enter archive name:', 
                    defaultValue: `${file}.zip`,
                    confirmText: 'Archive'
                });
                if (archiveName) {
                    const result = await apiCall('archive', { files: [file], archiveName });
                    handleApiResponse(result, 'File archived successfully!');
                }
            } catch (err) { console.log(err); }
        }

        async function deleteFile(file) {
            try {
                await showConfirm({ 
                    title: 'Confirm Deletion', 
                    message: `Are you sure you want to delete ${file}?`,
                    confirmText: 'Delete'
                });
                const result = await apiCall('delete', { files: [file] });
                handleApiResponse(result, 'File deleted successfully!');
            } catch (err) { console.log(err); }
        }

        async function bulkDelete() {
            const selected = getSelectedFiles();
            if (selected.length === 0) return;
            try {
                await showConfirm({ 
                    title: 'Confirm Bulk Deletion', 
                    message: `Delete ${selected.length} items?`,
                    confirmText: 'Delete'
                });
                const result = await apiCall('delete', { files: selected });
                handleApiResponse(result, `Deleted ${selected.length} items successfully!`);
            } catch (err) { console.log(err); }
        }

        async function bulkMove() {
            const selected = getSelectedFiles();
            if (selected.length === 0) return;
            try {
                const newPath = await showPrompt({ 
                    title: 'Move Selected Items', 
                    label: 'Enter new directory for selected items:', 
                    confirmText: 'Move' 
                });
                if (newPath) {
                    const result = await apiCall('move', { files: selected, newPath });
                    handleApiResponse(result, `Moved ${selected.length} items successfully!`);
                }
            } catch (err) { console.log(err); }
        }

        async function bulkArchive() {
            const selected = getSelectedFiles();
            if (selected.length === 0) return;
            try {
                const archiveName = await showPrompt({ 
                    title: 'Archive Selected Items', 
                    label: 'Enter archive name:',
                    defaultValue: `archive-${Date.now()}.zip`,
                    confirmText: 'Archive'
                });
                if (archiveName) {
                    const result = await apiCall('archive', { files: selected, archiveName });
                    handleApiResponse(result, 'Files archived successfully!');
                }
            } catch (err) { console.log(err); }
        }
        
        const dropZone = document.getElementById('file-manager-container');

        dropZone.addEventListener('dragenter', (e) => {
            e.preventDefault();
            e.stopPropagation();
            dropZone.classList.add('drag-over');
        });

        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.stopPropagation();
        });

        dropZone.addEventListener('dragleave', (e) => {
            e.preventDefault();
            e.stopPropagation();
            setTimeout(() => {
                dropZone.classList.remove('drag-over');
            }, 100);
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            e.stopPropagation();
            dropZone.classList.remove('drag-over');
            const files = e.dataTransfer.files;
            if (files.length) {
                uploadFiles(files);
            }
        });

        function showToast(message, type = 'success') {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            container.appendChild(toast);
            setTimeout(() => toast.classList.add('show'), 100);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => container.removeChild(toast), 300);
            }, 3000);
        }

        async function apiCall(endpoint, body) {
            const response = await fetch(`/api/server/${serverPort}/files/${endpoint}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            });
            return response.json();
        }

        async function handleApiResponse(result, successMessage) {
            if (result.success) {
                showToast(successMessage || result.message || 'Operation successful!');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast(result.message || 'An error occurred.', 'error');
            }
        }

        function toggleDropdown(id) {
            document.querySelectorAll('.dropdown-content.show').forEach(d => {
                if (d.id !== id) d.classList.remove('show');
            });
            document.getElementById(id).classList.toggle("show");
        }

        window.onclick = function(event) {
            if (!event.target.matches('.dots-btn')) {
                document.querySelectorAll('.dropdown-content.show').forEach(d => d.classList.remove('show'));
            }
        }
        function triggerUpload() {
            document.getElementById('file-upload-input').click();
        }

        async function uploadFiles(files) { // Modified to accept files
            if (!files || files.length === 0) return;

            const formData = new FormData();
            formData.append('path', currentPath);
            for (const file of files) {
                formData.append('files', file);
            }

            showToast(`Uploading ${files.length} file(s)...`);

            const response = await fetch(`/api/server/${serverPort}/files/upload`, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            handleApiResponse(result, `${files.length} file(s) uploaded successfully!`);
            
            const input = document.getElementById('file-upload-input');
            input.value = ''; 
        }

        const selectAll = document.getElementById('select-all');
        const checkboxes = document.querySelectorAll('.file-checkbox');
        const bulkActions = document.getElementById('bulk-actions');

        selectAll.addEventListener('change', function() {
            checkboxes.forEach(checkbox => checkbox.checked = this.checked);
            toggleBulkActions();
        });

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', toggleBulkActions);
        });

        function toggleBulkActions() {
            const anyChecked = Array.from(checkboxes).some(c => c.checked);
            bulkActions.style.display = anyChecked ? 'block' : 'none';
        }

        function getSelectedFiles() {
            return Array.from(checkboxes).filter(c => c.checked).map(c => c.value);
        }
    </script>
</body>
</html>
