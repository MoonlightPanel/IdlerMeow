
<!DOCTYPE html>
<html>
<head>
    <title>Server #<%= server.port %> - Details</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body { 
            font-family: Arial, sans-serif; 
            background-color: <%= settings.backgroundColor %>;
            <% if (settings.backgroundImage) { %>
            background-image: url('<%= settings.backgroundImage %>');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            <% } %>
        }
        .top-bar {
            background: rgba(44, 62, 80, 0.85);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            color: white;
            padding: 15px 20px;
            margin: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            border-radius: 10px;
        }
        .top-bar h1 {
            font-size: 24px;
        }
        .nav-links {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        .nav-links a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            background-color: #3498db;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .nav-links a:hover {
            background-color: #2980b9;
        }
        .profile-dropdown {
            position: relative;
            display: inline-block;
        }
        .profile-btn {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            background-color: #e74c3c;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .profile-btn:hover {
            background-color: #c0392b;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            border-radius: 5px;
            z-index: 1;
        }
        .dropdown-content a {
            color: #333;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            background: none;
            border-radius: 0;
        }
        .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        .profile-dropdown:hover .dropdown-content {
            display: block;
        }
        .container {
            display: flex;
            min-height: calc(100vh - 90px);
            gap: 10px;
            padding: 0 10px;
        }
        .sidebar {
            width: 250px;
            background: rgba(52, 73, 94, 0.8);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            color: white;
            padding: 20px 0;
            margin: 10px;
            border-radius: 10px;
        }
        .sidebar-item {
            padding: 12px 20px;
            cursor: pointer;
            border-bottom: 1px solid #2c3e50;
            transition: background-color 0.3s;
            text-decoration: none;
            color: white;
            display: block;
            font-size: 14px;
        }
        .sidebar-item:hover, .sidebar-item.active {
            background-color: #2c3e50;
        }
        .content {
            flex: 1;
            padding: 30px;
        }
        .server-container { 
            background: rgba(255, 255, 255, 0.9); 
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
            border-radius: 10px; 
            padding: 30px; 
            box-shadow: 0 8px 32px rgba(0,0,0,0.1); 
            border: 1px solid rgba(255,255,255,0.2);
            max-width: 1200px; 
            margin: 0 auto; 
        }
        .server-title { 
            font-size: 28px; 
            font-weight: bold; 
            color: #333; 
            margin-bottom: 20px; 
            text-align: center; 
        }
        .specs-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 20px; 
            margin: 30px 0; 
        }
        .spec-card { 
            background-color: #f8f9fa; 
            padding: 20px; 
            border-radius: 10px; 
            text-align: center; 
            border-left: 4px solid #007bff; 
        }
        .spec-card.port { border-left-color: #28a745; }
        .spec-card.cpu { border-left-color: #dc3545; }
        .spec-card.ram { border-left-color: #ffc107; }
        .spec-card.disk { border-left-color: #6f42c1; }
        .spec-label { 
            font-size: 14px; 
            color: #666; 
            text-transform: uppercase; 
            letter-spacing: 1px; 
            margin-bottom: 10px; 
        }
        .spec-value { 
            font-size: 24px; 
            font-weight: bold; 
            color: #333; 
        }
        .actions { 
            margin: 40px 0; 
            text-align: center; 
        }
        .action-btn { 
            display: inline-block; 
            margin: 10px; 
            padding: 12px 24px; 
            background-color: #007bff; 
            color: white; 
            text-decoration: none; 
            border: none; 
            border-radius: 5px; 
            font-weight: bold; 
            cursor: pointer; 
        }
        .action-btn.success { background-color: #28a745; }
        .action-btn.danger { background-color: #dc3545; }
        .action-btn.warning { background-color: #ffc107; color: #212529; }
        .action-btn.info { background-color: #17a2b8; }
        .action-btn:disabled { 
            background-color: #6c757d; 
            cursor: not-allowed; 
            opacity: 0.6; 
        }
        .status { 
            display: inline-block; 
            padding: 5px 15px; 
            border-radius: 20px; 
            font-size: 12px; 
            font-weight: bold; 
            text-transform: uppercase; 
            margin-bottom: 20px; 
        }
        .status.online { background-color: #28a745; color: white; }
        .status.offline { background-color: #dc3545; color: white; }
        .console-container { 
            margin-top: 40px; 
            background-color: #1e1e1e; 
            border-radius: 10px; 
            padding: 20px; 
            height: 400px; 
            display: flex; 
            flex-direction: column; 
        }
        .console-header { 
            color: #fff; 
            font-weight: bold; 
            margin-bottom: 10px; 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
        }
        .console-output { 
            flex: 1; 
            background-color: #1a1a1a; 
            color: #ffffff; 
            font-family: 'Consolas', 'Monaco', 'Lucida Console', monospace; 
            font-size: 14px; 
            line-height: 1.4; 
            padding: 15px; 
            border-radius: 5px; 
            overflow-y: auto; 
            white-space: pre-wrap; 
            margin-bottom: 15px; 
            border: 1px solid #333; 
            word-wrap: break-word; 
            letter-spacing: 0.5px; 
        }
        .console-input { 
            display: flex; 
            gap: 10px; 
        }
        .console-input input { 
            flex: 1; 
            padding: 10px; 
            background-color: #2d2d2d; 
            color: #fff; 
            border: 1px solid #555; 
            border-radius: 5px; 
            font-family: 'Consolas', 'Monaco', 'Lucida Console', monospace; 
            font-size: 14px; 
        }
        .console-input button { 
            padding: 8px 15px; 
            background-color: #007bff; 
            color: white; 
            border: none; 
            border-radius: 3px; 
            cursor: pointer; 
        }
        .clear-btn { 
            padding: 5px 10px; 
            background-color: #6c757d; 
            color: white; 
            border: none; 
            border-radius: 3px; 
            cursor: pointer; 
            font-size: 12px; 
        }
    </style>
</head>
<body>
    <div class="top-bar">
        <h1><%= settings.title || 'Server Management' %></h1>
        <div class="nav-links">
            <a href="/index">Dashboard</a>
            <% if (user.admin) { %>
                <a href="/admin">Admin Panel</a>
            <% } %>
            <div class="profile-dropdown">
                <span class="profile-btn">Profile</span>
                <div class="dropdown-content">
                    <a href="#">Profile</a>
                    <a href="/logout">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="sidebar">
            <div class="sidebar-item active">
                Console
            </div>
            <a href="/server/<%= server.port %>/files" class="sidebar-item">
                File Manager
            </a>
            <% if (user.admin || server.owner === user.email) { %>
                <a href="/server/<%= server.port %>/users" class="sidebar-item">
                    Users
                </a>
            <% } %>
            <div class="sidebar-item" style="color: #888; cursor: not-allowed;">
                Settings
            </div>
        </div>

        <div class="content">
            <div class="server-container">
                <div class="server-title">
                    Server #<%= server.port %>
                    <br>
                    <span class="status" id="server-status">Checking...</span>
                </div>

                <div class="specs-grid">
                     <div class="spec-card port"><div class="spec-label">Port</div><div class="spec-value"><%= server.port %></div></div>
                     <div class="spec-card cpu"><div class="spec-label">CPU Cores</div><div class="spec-value"><%= server.cpu %></div></div>
                     <div class="spec-card ram"><div class="spec-label">RAM</div><div class="spec-value"><%= server.ram %> GB</div></div>
                     <div class="spec-card disk"><div class="spec-label">Disk Space</div><div class="spec-value"><%= server.disk %> GB</div></div>
                </div>

                <div class="actions">
                    <button onclick="startServer()" class="action-btn success" id="start-btn">Start</button>
                    <button onclick="stopServer()" class="action-btn danger" id="stop-btn">Stop</button>
                </div>

                <div class="console-container">
                    <div class="console-header">
                        Console
                        <button class="clear-btn" onclick="clearConsole(true)">Clear</button>
                    </div>
                    <div class="console-output" id="console-output"></div>
                    <div class="console-input">
                        <input type="text" id="command-input" placeholder="Enter command..." onkeypress="handleKeyPress(event)">
                        <button onclick="sendCommand()">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const serverPort = <%= server.port %>;
        let ws;

        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            ws = new WebSocket(`${protocol}//${window.location.host}/ws/server/<%= server.port %>`);

            ws.onopen = function() {
                updateStatus();
            };

            ws.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    if (data.type === 'console') {
                        addToConsole(data.message.trim());
                    } else if (data.type === 'status') {
                        updateStatus(data.status);
                    }
                } catch (e) {
                    addToConsole('[Console] Error parsing message: ' + event.data, true);
                }
            };

            ws.onclose = function() {
                addToConsole('[Console] Disconnected. Reconnect will be attempted.', true);
                 setTimeout(connectWebSocket, 5000);
            };

            ws.onerror = function(error) {
                addToConsole('[Console] Connection error.', true);
                console.error('WebSocket error:', error);
            };
        }

        function parseMinecraftColors(message) {
            // Remove first timestamp prefix like [20:14:33] but keep server timestamp like [13:14:32 INFO]:
            let cleanedMessage = message.replace(/^\[\d{2}:\d{2}:\d{2}\]\s+/, '');
            
            // Parse ANSI color codes
            let coloredMessage = cleanedMessage
                // 38;2;r;g;b format (true color)
                .replace(/\[38;2;(\d+);(\d+);(\d+)m/g, '<span style="color: rgb($1, $2, $3)">')
                // Reset codes
                .replace(/\[0m/g, '</span>')
                // Standard ANSI codes
                .replace(/\[30m/g, '<span style="color: #000000">') // Black
                .replace(/\[31m/g, '<span style="color: #AA0000">') // Red
                .replace(/\[32m/g, '<span style="color: #00AA00">') // Green
                .replace(/\[33m/g, '<span style="color: #FFAA00">') // Yellow
                .replace(/\[34m/g, '<span style="color: #0000AA">') // Blue
                .replace(/\[35m/g, '<span style="color: #AA00AA">') // Magenta
                .replace(/\[36m/g, '<span style="color: #00AAAA">') // Cyan
                .replace(/\[37m/g, '<span style="color: #AAAAAA">') // White
                // Bright colors
                .replace(/\[90m/g, '<span style="color: #555555">') // Bright Black
                .replace(/\[91m/g, '<span style="color: #FF5555">') // Bright Red
                .replace(/\[92m/g, '<span style="color: #55FF55">') // Bright Green
                .replace(/\[93m/g, '<span style="color: #FFFF55">') // Bright Yellow
                .replace(/\[94m/g, '<span style="color: #5555FF">') // Bright Blue
                .replace(/\[95m/g, '<span style="color: #FF55FF">') // Bright Magenta
                .replace(/\[96m/g, '<span style="color: #55FFFF">') // Bright Cyan
                .replace(/\[97m/g, '<span style="color: #FFFFFF">'); // Bright White
            
            // Make URLs clickable
            const urlRegex = /(https?:\/\/[^\s<>"{}|\\^`\[\]]+)/g;
            coloredMessage = coloredMessage.replace(urlRegex, '<a href="$1" target="_blank" style="color: #4da6ff; text-decoration: underline; cursor: pointer;">$1</a>');
            
            return coloredMessage;
        }

        function addToConsole(message, isStatusMessage = false) {
            if (!message || message.trim() === '') return;
            const consoleOutput = document.getElementById('console-output');
            const timestamp = new Date().toLocaleTimeString();
            
            // Parse colors for display
            const coloredMessage = parseMinecraftColors(message);
            const logEntry = `[${timestamp}] ${coloredMessage}\n`;
            
            // Create a new div element for this log entry
            const logDiv = document.createElement('div');
            logDiv.innerHTML = `[${timestamp}] ${coloredMessage}`;
            consoleOutput.appendChild(logDiv);
            consoleOutput.scrollTop = consoleOutput.scrollHeight;
            
            if (!isStatusMessage) {
                const storageKey = `console_log_${serverPort}`;
                const existingLog = localStorage.getItem(storageKey) || '';
                // Store without HTML tags for plain text backup
                const plainLogEntry = `[${timestamp}] ${message}\n`;
                localStorage.setItem(storageKey, existingLog + plainLogEntry);
            }
        }

        function clearConsole(manualClear = false) {
            const consoleOutput = document.getElementById('console-output');
            consoleOutput.innerHTML = '';
            if(manualClear){
                 const storageKey = `console_log_${serverPort}`;
                 localStorage.removeItem(storageKey);
            }
        }

        function loadConsoleHistory() {
            const storageKey = `console_log_${serverPort}`;
            const savedLog = localStorage.getItem(storageKey);
            const status = document.getElementById('server-status').textContent;

            if (savedLog && status === 'Online') {
                const consoleOutput = document.getElementById('console-output');
                const lines = savedLog.split('\n').filter(line => line.trim() !== '');
                lines.forEach(line => {
                    const logDiv = document.createElement('div');
                    logDiv.innerHTML = parseMinecraftColors(line);
                    consoleOutput.appendChild(logDiv);
                });
            } else if (status === 'Offline') {
                 localStorage.removeItem(storageKey);
            }
            const consoleOutput = document.getElementById('console-output');
            consoleOutput.scrollTop = consoleOutput.scrollHeight;
        }

        function updateStatus(status) {
            const statusElement = document.getElementById('server-status');
            const currentStatus = statusElement.textContent;

            if (status && status === currentStatus) return; // No change

            function applyStatus(s) {
                statusElement.textContent = s;
                statusElement.className = s === 'Online' ? 'status online' : 'status offline';

                // Update button states based on server status
                const startBtn = document.getElementById('start-btn');
                const stopBtn = document.getElementById('stop-btn');
                
                if (s === 'Online') {
                    startBtn.disabled = true;
                    stopBtn.disabled = false;
                } else {
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                }

                if (s === 'Offline') {
                    clearConsole(false);
                }
            }

            if (!status) {
                fetch(`/api/server/<%= server.port %>/status`)
                    .then(response => response.json())
                    .then(data => applyStatus(data.status))
                    .catch(error => console.error('Error fetching status:', error));
            } else {
                applyStatus(status);
            }
        }

        async function apiCall(action, options = {}) {
            try {
                const response = await fetch(`/api/server/${serverPort}/${action}`, { method: 'POST', ...options });
                if (!response.ok) {
                    const errorText = await response.text();
                    try {
                        const data = JSON.parse(errorText);
                        addToConsole(`[Console] Error: ${data.message || 'Unknown error'}`, true);
                    } catch (e) {
                        console.error("Non-JSON API response:", errorText);
                        addToConsole(`[Console] API call for ${action} failed. Server returned an unexpected response.`, true);
                    }
                    return;
                }

                const data = await response.json();
                const message = data.message || (data.success ? `${action} successful.` : `${action} failed.`);
                addToConsole(`[Console] ${message}`, true);

            } catch(err) {
                 addToConsole(`[Console] API call for ${action} failed: ${err.message}`, true);
            }
        }

        function startServer() { apiCall('start'); }
        function stopServer() { apiCall('stop'); }

        function sendCommand() {
            const input = document.getElementById('command-input');
            const command = input.value.trim();
            if (command) {
                addToConsole(`> ${command}`, true);
                fetch(`/api/server/${serverPort}/command`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ command })
                }).catch(err => {
                    addToConsole(`[Console] Command failed: ${err.message}`, true);
                });
                input.value = '';
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') sendCommand();
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetch(`/api/server/<%= server.port %>/status`)
                .then(response => response.json())
                .then(data => {
                    updateStatus(data.status);
                    loadConsoleHistory();
                    connectWebSocket();
                });

            setInterval(() => updateStatus(), 5000);
        });

    </script>
</body>
</html>
